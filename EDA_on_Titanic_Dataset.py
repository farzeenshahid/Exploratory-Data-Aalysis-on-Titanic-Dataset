# -*- coding: utf-8 -*-
"""Project_01_EDA_on_Titanic_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uLesrsmPUfpoMWxwTWsvI0-LpkN8lOkm

**1. Data Exploration**
"""

import pandas as pd

# Load the dataset
train_data = pd.read_csv("train.csv")
print(train_data.head())
print(train_data.info())
print(train_data.describe())

"""**2. Data Cleaning and Preprocessing**"""

# Handle missing values
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
train_data['Cabin'] = train_data['Cabin'].fillna('Unknown')

# Encode categorical variables
train_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'], drop_first=True)

# Create new features
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1

"""**3. Exploratory Data Analysis (EDA)**"""

import seaborn as sns
import matplotlib.pyplot as plt

# Survival rate by gender
sns.barplot(x='Sex_male', y='Survived', data=train_data)
plt.title("Survival Rate by Gender")
plt.show()

# Survival rate by Pclass
sns.barplot(x='Pclass', y='Survived', data=train_data)
plt.title("Survival Rate by Class")
plt.show()

# Survival rate by Age
plt.figure(figsize=(10, 6))
sns.histplot(train_data[train_data['Survived'] == 1]['Age'], color="green", label="Survived", kde=True)
sns.histplot(train_data[train_data['Survived'] == 0]['Age'], color="red", label="Did not survive", kde=True)
plt.legend()
plt.title("Survival Rate by Age")
plt.show()

"""**4. Modeling**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Select features and target
features = ['Pclass', 'Age', 'Fare', 'FamilySize', 'Sex_male', 'Embarked_Q', 'Embarked_S']
X = train_data[features]
y = train_data['Survived']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))